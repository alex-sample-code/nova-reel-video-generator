import json
import os
from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)

class PromptGenerator:
    def __init__(self, templates_path: str = "templates/style_prompts.json"):
        """
        Initialize prompt generator with style templates
        
        Args:
            templates_path: Path to the style templates JSON file
        """
        self.templates_path = templates_path
        self.style_templates = self._load_templates()
    
    def _load_templates(self) -> Dict[str, Any]:
        """Load style templates from JSON file"""
        try:
            with open(self.templates_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"Error loading templates: {str(e)}")
            return {}
    
    def get_style_info(self, style: str) -> Dict[str, Any]:
        """
        Get style information from templates
        
        Args:
            style: Selected style name
            
        Returns:
            Style information dictionary
        """
        # Search in all style categories
        for category, styles in self.style_templates.items():
            if style in styles:
                return styles[style]
        
        # Return default if style not found
        logger.warning(f"Style '{style}' not found in templates")
        return {
            "keywords": ["natural", "smooth"],
            "description": "Create a natural video with smooth transitions"
        }
    
    def get_all_styles(self) -> Dict[str, list]:
        """
        Get all available styles organized by category
        
        Returns:
            Dictionary with style categories and their options
        """
        all_styles = {}
        for category, styles in self.style_templates.items():
            category_name = category.replace('_', ' ').title()
            all_styles[category_name] = list(styles.keys())
        
        return all_styles
    
    def get_flat_style_list(self) -> list:
        """
        Get a flat list of all available styles
        
        Returns:
            List of all style names
        """
        all_styles = []
        for category, styles in self.style_templates.items():
            all_styles.extend(styles.keys())
        
        return all_styles
    
    def enhance_prompt_with_style(self, base_prompt: str, style: str) -> str:
        """
        Enhance a base prompt with style-specific elements
        
        Args:
            base_prompt: Base prompt generated by Claude
            style: Selected style
            
        Returns:
            Enhanced prompt with style elements
        """
        style_info = self.get_style_info(style)
        keywords = ", ".join(style_info["keywords"])
        
        enhanced_prompt = f"{base_prompt}\n\nStyle: {style_info['description']}\nKeywords: {keywords}"
        
        return enhanced_prompt
